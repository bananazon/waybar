{
    "layer": "{{ layer }}",
    "position": "{{ position }}",
    "height": {{ height }},
    "spacing": {{ spacing }},
    "exclusive": {{ ("true" if exclusive is not none) or "false" }},

    "modules-right": {{ modules_right | tojson(indent=4) | indent(4) }},

    {% if cpu_usage.enabled == true %}
    "custom/cpu-usage": {
        "exec": "{{ scripts_path }}/cpu-usage.py",
        "interval": {{ cpu_usage.get("interval", 10) if cpu_usage is defined else 10 }},
        "return-type": "json"
    },
    {% endif %}

    {% for fs in filesystems %}
    {% if fs.enabled == true %}
    "custom/filesystem-usage-{{ fs.label }}": {
        "format": "{}",
        "return-type": "json",
        "exec": "{{ scripts_path }}/filesystem-usage.py --mountpoint {{ fs.mountpoint }} --label {{ fs.label }} --interval {{ fs.get("interval", 10) if fs is defined else 10 }} --unit {{ (fs.unit if fs.unit else "auto") or "auto" }}{{ " --show-stats" if fs.show_stats and fs.show_stats == true}}{{ " --debug" if fs.debug and fs.debug == true}}",
        "on-click": "kill -USR1 $(pgrep -f 'python3 {{ scripts_path }}/filesystem-usage.py --mountpoint {{ fs.mountpoint }} --label {{ fs.label }} --interval {{ fs.get("interval", 10) if fs is defined else 10 }} --unit {{ (fs.unit if fs.unit else "auto") or "auto" }}{{ " --show-stats" if fs.show_stats and fs.show_stats == true}}{{ " --debug" if fs.debug and fs.debug == true}}')",
        "on-click-right": "kill -HUP $(pgrep -f 'python3 {{ scripts_path }}/filesystem-usage.py --mountpoint {{ fs.mountpoint }} --label {{ fs.label }} --interval {{ fs.get("interval", 10) if fs is defined else 10 }} --unit {{ (fs.unit if fs.unit else "auto") or "auto" }}{{ " --show-stats" if fs.show_stats and fs.show_stats == true}}{{ " --debug" if fs.debug and fs.debug == true}}')"
    },
    {% endif %}
    {% endfor %}

    {% if memory_usage.enabled == true %}
    "custom/memory-usage": {
        "exec": "{{ scripts_path }}/memory-usage.py --unit {{ memory_usage.get("unit", "auto") if memory_usage is defined else "auto" }}",
        "interval": {{ memory_usage.get("interval", 10) if memory_usage is defined else 10 }},
        "return-type": "json",
        "on-click": "{{ scripts_path }}/memory-usage.py --unit {{ memory_usage.get("unit", "auto") if memory_usage is defined else "auto" }} --toggle"
    },
    {% endif %}

    {% for iface in network_interfaces %}
    {% if iface.enabled %}
    "custom/network-throughput-{{ iface.name }}": {
        "exec": "{{ scripts_path }}/network-throughput.py --interface {{ iface.name }}",
        "interval": {{ iface.get("interval", 10) if iface is defined else 10 }},
        "return-type": "json"
    },
    {% endif %}
    {% endfor %}

    {% if plex_status.enabled == true %}
    "custom/plex-status": {
        "exec": "{{ scripts_path }}/plex-status.py --ip {{ plex_status.get("ip", "127.0.0.1") if plex_status is defined else "127.0.0.1" }} --port {{ plex_status.get("port", 32400) if plex_status is defined else 32400 }} --token '{{ plex_status.api_key if plex_status.api_key else none}}'",
        "interval": {{ plex_status.get("interval", 10) if plex_status is defined else 10 }},
        "return-type": "json",
        "on-click": "{{ scripts_path }}/plex-status.py --ip {{ plex_status.get("ip", "127.0.0.1") if plex_status is defined else "127.0.0.1" }} --port {{ plex_status.get("port", 32400) if plex_status is defined else 32400 }} --token '{{ plex_status.api_key if plex_status.api_key else none}}'"
    },
    {% endif %}

    {% if quakes.enabled %}
    "custom/quakes": {
        "format": "{}",
        "return-type": "json",
        "exec": "{{ scripts_path }}/quakes.py --interval {{ quakes.get("interval", 1800) if quakes is defined else 1800 }} --radius {{ quakes.get("radius", "100m") if quakes is defined else "100m" }} --limit {{ quakes.get("limit", 20) if quakes is defined else 20 }} --magnitude {{ quakes.get("magnitude", 0.1) if quakes is defined else 0.1 }}",
        "on-click": "kill -HUP $(pgrep -f 'python3 {{ scripts_path }}/quakes.py --interval {{ quakes.get("interval", 1800) if quakes is defined else 1800 }} --radius {{ quakes.get("radius", "100m") if quakes is defined else "100m" }} --limit {{ quakes.get("limit", 20) if quakes is defined else 20 }} --magnitude {{ quakes.get("magnitude", 0.1) if quakes is defined else 0.1 }}')"
    },
    {% endif %}

    {% if software_updates.enabled and (software_updates.package_types|length > 0) %}
    "custom/software-updates": {
        "format": "{}",
        "return-type": "json",
        "exec": "{{ scripts_path }}/software-updates.py {% for p in software_updates.package_types %}--package-type {{ p }} {% endfor %}--interval {{ software_updates.get("interval", 1800) if software_updates is defined else 1800 }}",
        "on-click": "kill -USR1 $(pgrep -f 'python3 {{ scripts_path }}/software-updates.py {% for p in software_updates.package_types %}--package-type {{ p }} {% endfor %}--interval {{ software_updates.get("interval", 1800) if s is defined else 1800 }}')",
        "on-click-right": "kill -HUP $(pgrep -f 'python3 {{ scripts_path }}/software-updates.py {% for p in software_updates.package_types %}--package-type {{ p }} {% endfor %}--interval {{ software_updates.get("interval", 1800) if s is defined else 1800 }}')"
    },
    {% endif %}

    {% if speedtest.enabled == true %}
    "custom/speedtest": {
        "format": "{}",
        "return-type": "json",
        "exec": "{{ scripts_path }}/speedtest.py --interval {{ speedtest.get("interval", 300) if speedtest is defined else 300 }}",
        "on-click": "kill -HUP $(pgrep -f 'python3 {{ scripts_path }}/speedtest.py --interval {{ speedtest.get("interval", 300) if speedtest is defined else 300 }}')"
    },
    {% endif %}

    {% if weather.enabled and (weather.locations|length >0) %}
    "custom/weather": {
        "format" : "{}",
        "return-type": "json",
        "exec": "{{ scripts_path }}/weather.py --api-key {{ weather.api_key }} {% for l in weather.locations %}--location '{{ l }}' {% endfor %}--interval {{ weather.get("interval", 300) if weather is defined else 300 }}",
        "on-click": "kill -USR1 $(pgrep -f 'python3 {{ scripts_path }}/weather.py --api-key {{ weather.api_key }} {% for l in weather.locations %}--location {{ l }} {% endfor %}--interval {{ weather.get("interval", 300) if weather is defined else 300 }}')",
        "on-click-right": "kill -HUP $(pgrep -f 'python3 {{ scripts_path }}/weather.py --api-key {{ weather.api_key }} {% for l in weather.locations %}--location {{ l }} {% endfor %}--interval {{ weather.get("interval", 300) if weather is defined else 300 }}')"
    },
    {% endif %}

    {% for iface in network_interfaces %}
    {% if iface.type == 'wifi' and iface.enabled %}
    "custom/wifi-status-{{ iface.name }}": {
        "exec": "{{ scripts_path }}/wifi-status.py --interface {{ iface.name }}",
        "interval": {{ iface.get("interval", 10) if iface is defined else 10 }},
        "return-type": "json"
    },
    {% endif %}
    {% endfor %}

    "custom/nothing": {
        "exec": "echo ' '"
    }
}
